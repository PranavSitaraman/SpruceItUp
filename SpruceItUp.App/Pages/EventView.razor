@using SpruceItUp.Shared.Models
@inject HttpClient Http;
@if (_modelReady)
{
    <div class="body-view" style="height: @(_height)vh;">
        <div class="control-bar">
            <ion-icon name="bookmark" class="save-icon"></ion-icon>
            <ion-icon name="@_iconName" class="expand-icon" @onclick="Resize"></ion-icon>
            <ion-icon class="close-icon" name="close-outline" @onclick="CloseCallback"></ion-icon>
        </div>
        <div class="post-view">
            <h1>@Loc.Title</h1>
            <h2>@AuthorName</h2>
            <DateTimeDisplay Preview="Happening " Date="@Loc.Expires" />
            <h4>@Loc.Description</h4>
            @if (!Kind)
            {
                @if (!signup)
                {
                    <button class="post-view" @onclick="Signup">Sign Up!</button>
                }
                else
                {
                    <button class="post-view" @onclick="Unsignup">Cancel Signup</button>
                }
            }
            @if (!string.IsNullOrEmpty(Loc.Image))
            {
                <div class="image-container">
                        <img src="@Loc.Image" alt="Pin Image"/>
                </div>
            }
        </div>
    </div>
}
@code
{
    [Parameter] public Loc Loc { get; set; }
    [Parameter] public Action CloseCallback { get; set; }
    [Parameter] public Action UpdateCallback { get; set; }
    [Parameter] public bool Kind { get; set; }
    public string AuthorName { get; set; }
    private bool _modelReady { get; set; } = false;
    private int _height { get; set; } = 40;
    private string _iconName { get; set; } = "chevron-up-outline";
    public bool signup;
    protected override async Task OnInitializedAsync()
    {
        AuthorName = await Http.GetFromJsonAsync<string>($"Account/GetName/{Loc.Author}");
        var locs = await Http.GetFromJsonAsync<Guid[]>("Account/Signups");
        signup = false;
        if (locs != null && locs.Contains(Loc.Id)) signup = true;
        _modelReady = true;
        StateHasChanged();
    }
    private async void Signup()
    {
        await Http.PostAsJsonAsync("Account/AddSignup", Loc.Id);
        signup = true;
        UpdateCallback();
        StateHasChanged();
    }
    private async void Unsignup()
    {
        await Http.PostAsJsonAsync("Account/RemoveSignup", Loc.Id);
        signup = false;
        UpdateCallback();
        StateHasChanged();
    }
    private void Resize()
    {
        if (_height == 40)
        {
            _height = 90;
            _iconName = "chevron-down-outline";
        }
        else if (_height == 90)
        {
            _height = 40;
            _iconName = "chevron-up-outline";
        }
        StateHasChanged();
    }
}